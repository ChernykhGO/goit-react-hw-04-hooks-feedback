{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.module.css","components/SectionTitle/SectionTitle.module.css","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/SectionTitle/SectionTitle.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Statistics","good","neutral","bad","total","positivePercentage","console","log","FeedbackOptions","options","onLeaveFeedback","map","option","type","name","style","backgroundColor","color","className","styles","button","onClick","SectionTitle","title","children","Section","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","event","target","prevState","warn","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8IACAA,EAAOC,QAAU,CAAC,OAAS,kC,gBCA3BD,EAAOC,QAAU,CAAC,QAAU,gC,uICIb,SAASC,EAAT,GAAsE,IAAjDC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,IAAKC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,mBAE7D,OADFC,QAAQC,IAAIF,GAEV,gCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,W,oBCLW,SAASG,EAAT,GAAsD,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,gBAElD,OADEJ,QAAQC,IAAIE,GAEZ,8BACGA,EAAQE,KAAI,SAACC,GAAD,OACX,wBACEC,KAAK,SAELC,KAAMF,EAAOE,KACbC,MAAO,CAAEC,gBAAiBJ,EAAOK,OACjCC,UAAWC,IAAOC,OAClBC,QAASX,EANX,SAQGE,EAAOE,MANHF,EAAOE,W,oBCNL,SAASQ,EAAT,GAA0C,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SAC7C,OACE,sBAAKN,UAAWC,IAAOM,QAAvB,UACE,6BAAKF,IACJC,KCNL,IAEeE,EAFM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,K,MCE3B,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAO5B,EAAP,KAAa6B,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAO3B,EAAP,KAAgB6B,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAO1B,EAAP,KAAY6B,EAAZ,KAuBMC,EAAqB,WACzB,OAAOhC,EAAOC,EAAUC,GAU1B,OACE,gCACE,cAACmB,EAAD,CAAcC,MAAM,wBAApB,SACE,cAACf,EAAD,CACEC,QApCW,CACjB,CAAEK,KAAM,OAAQG,MAAO,QACvB,CAAEH,KAAM,UAAWG,MAAO,UAC1B,CAAEH,KAAM,MAAOG,MAAO,QAkChBP,gBA/Be,SAACwB,GACtB,OAAQA,EAAMC,OAAOrB,MACnB,IAAK,OACHgB,GAAQ,SAAAM,GAAS,OAAIA,EAAY,KACjC,MACF,IAAK,UACHL,GAAW,SAAAK,GAAS,OAAIA,EAAY,KACpC,MACF,IAAK,MACHJ,GAAO,SAAAI,GAAS,OAAIA,EAAY,KAChC,MACF,QAAS9B,QAAQ+B,KAAR,iGAAiCH,EAAMC,OAAOrB,KAA9C,qFAwBT,cAACQ,EAAD,CAAcC,MAAM,aAApB,SAC4B,IAAzBU,IACC,cAAC,EAAD,CAAcN,QAAQ,sBAGpB,cAAC3B,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO6B,IACP5B,mBAxBHiC,KAAKC,MACT,IAAMtC,EAAQgC,YC1CrB,IAYeO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.44d6e98e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__1mhUT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Section\":\"SectionTitle_Section__37Ufo\"};","// Вынеси отображение статистики в отдельный компонент\n//   `<Statistics good={} neutral={} bad={} total={} positivePercentage={}>`.\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default function Statistics({good, neutral, bad, total, positivePercentage}) {\nconsole.log(positivePercentage)\n  return (\n  <div>\n    <p>Good: {good}</p>\n    <p>Neutral: {neutral}</p>\n    <p>Bad: {bad}</p>\n    <p>Total: {total}</p>\n    <p>Positive feedback: {positivePercentage} %</p>\n  </div>\n);\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n","// - Вынеси блок кнопок в компонент\n//   `<FeedbackOptions options={} onLeaveFeedback={}>`.\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./FeedbackOptions.module.css\";\n\n\nexport default function FeedbackOptions({options, onLeaveFeedback}) {\n  console.log(options)\nreturn (\n  <div>\n    {options.map((option) => (\n      <button\n        type=\"button\"\n        key={option.name}\n        name={option.name}\n        style={{ backgroundColor: option.color }}\n        className={styles.button}\n        onClick={onLeaveFeedback}\n      >\n        {option.name}\n      </button>\n    ))}\n  </div>\n)\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      color: PropTypes.string,\n    })\n  ),\n};\n","// Создай компонент `<Section title=\"\">`, который рендерит секцию с заголовком и\n//   детей (children). Оберни каждый из `<Statistics>` и `<FeedbackOptions>` в\n//   созданный компонент секции.\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./SectionTitle.module.css\";\n\n\nexport default function SectionTitle({title, children}) {\nreturn (\n  <div className={styles.Section}>\n    <h1>{title}</h1>\n    {children}\n  </div>\n);\n}\n\nSectionTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","// Расширь функционал приложения так, чтобы блок статистики рендерился только после\n// того, как был собран хотя бы один отзыв. Сообщение об отсутствиии статистики\n// вынеси в компонент `<Notification message=\"No feedback given\">`.\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = ({ message }) => <p>{message}</p>;\n\nexport default Notification;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import React, { useState } from \"react\";\n\nimport Statistics from \"./components/Statistics\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport SectionTitle from \"./components/SectionTitle\";\nimport Notification from \"./components/Notification\";\n\nimport \"./App.css\";\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const allReviews = [\n    { name: \"good\", color: \"lime\" },\n    { name: \"neutral\", color: \"yellow\" },\n    { name: \"bad\", color: \"red\" },\n  ];\n\n  const сounterReviews = (event) => {\n    switch (event.target.name) {\n      case 'good':\n        setGood(prevState => prevState + 1);\n        break;\n      case 'neutral':\n        setNeutral(prevState => prevState + 1);\n        break;\n      case 'bad':\n        setBad(prevState => prevState + 1);\n        break;\n      default: console.warn(`Объекта с именем ${event.target.name} не обнаружено`)\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  }\n\n\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round(\n      (100 * good) / countTotalFeedback()\n    );\n  }\n\n  return (\n    <div>\n      <SectionTitle title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={allReviews}\n          onLeaveFeedback={сounterReviews}\n        />\n      </SectionTitle>\n\n      <SectionTitle title=\"Statistics\">\n        {countTotalFeedback() === 0 ? (\n          <Notification message=\"No feedback given\" />\n        )\n          : (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={countTotalFeedback()}\n              positivePercentage={countPositiveFeedbackPercentage()}\n            />\n          )}\n      </SectionTitle>\n    </div>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}